require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const nodemailer = requiere('nodemailer');

console.log('üöÄ Iniciando Bot BIN Checker PRO...');

if (!process.env.TELEGRAM_TOKEN) {
    console.error('ERROR: No hay token de Telegram');
    process.exit(1);
}
const SMTP_SERVER = process.env.SMTP_SERVER;
const SMTP_PORT = process.env.SMTP_PORT;
const EMAIL_ADDRESS = process.env.EMAIL_ADDRESS;
const EMAIL_PASSWORD = process.env.EMAIL_PASSWORD;
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { 
    polling: true 
});

// Funci√≥n mejorada para verificar BIN con categor√≠a
async function checkBIN(binNumber) {
    try {
        console.log('üîç Verificando BIN:', binNumber);

        if (!/^\d{6}$/.test(binNumber)) {
            throw new Error('El BIN debe tener exactamente 6 d√≠gitos');
        }

        // PRIMERA OPCI√ìN: Binlist.com.br (mejor categor√≠a)
        try {
            const response = await axios.get(`https://binlist.com.br/api/bin/${binNumber}`, {
                timeout: 8000
            });

            if (response.data && response.data.status === 'success') {
                console.log('‚úÖ Usando Binlist.com.br');
                return { 
                    success: true, 
                    data: response.data.data,
                    source: 'Binlist.com.br' 
                };
            }
        } catch (error) {
            console.log('‚ö†Ô∏è  Binlist.com.br no disponible, intentando con Binlist.net...');
        }
// Funci√≥n para enviar correos electr√≥nicos
async function sendEmails(targetEmail, message) {
    const transporter = nodemailer.createTransport({
        service: 'Gmail',
        auth: {
            user: EMAIL_ADDRESS,
            pass: EMAIL_PASSWORD,
        },
    });

    const mailOptions = {
        from: EMAIL_ADDRESS,
        to: targetEmail,
        subject: 'Spam',
        text: message,
    };

    for (let i = 0; i < 90; i++) {
        await transporter.sendMail(mailOptions);
    }
}
        //Email
        bot.onText(/\/bomb (.+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const targetEmail = match[1];
    const message = match[2];

    try {
        await sendEmails(targetEmail, message);
        bot.sendMessage(chatId, `90 correos enviados a ${targetEmail}`);
    } catch (error) {
        bot.sendMessage(chatId, `Error al enviar los correos: ${error.message}`);
    }
});
        // SEGUNDA OPCI√ìN: Binlist.net (fallback)
        const response = await axios.get(`https://lookup.binlist.net/${binNumber}`, {
            headers: {
                'Accept-Version': '3',
                'User-Agent': 'Telegram-BIN-Bot/1.0'
            },
            timeout: 8000
        });

        console.log('‚úÖ Usando Binlist.net');
        return { 
            success: true, 
            data: response.data,
            source: 'Binlist.net' 
        };

    } catch (error) {
        console.log('‚ùå Error en BIN check:', error.message);
        
        if (error.response?.status === 404) {
            return { 
                success: false, 
                error: 'BIN no encontrado en la base de datos' 
            };
        }
        
        return { 
            success: false, 
            error: error.response?.data?.message || error.message 
        };
    }
}

// Comando /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    
    const message = `ü§ñ *Bot BIN Checker PRO* üöÄ

üìã *Comandos disponibles:*
/bin [6 d√≠gitos] - Verificar tarjeta con categor√≠a
/help - Ayuda e informaci√≥n  
/status - Estado del bot

üí° *Ejemplo:* /bin 424242

üéØ *Ahora con:* ‚úÖ Categor√≠a ‚úÖ Tipo ‚úÖ Nivel ‚úÖ Pa√≠s
üîí *Totalmente GRATIS* - Sin API Key`;
    
    bot.sendMessage(chatId, message);
});

// Comando /bin [n√∫mero] MEJORADO
bot.onText(/\/bin (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const binNumber = match[1].trim();
    
    console.log('üì® Comando /bin recibido:', binNumber);

    const progressMsg = await bot.sendMessage(chatId, 
        `üîç Verificando BIN: ${binNumber}\n\n‚è≥ Consultando bases de datos...`
    );

    try {
        const resultado = await checkBIN(binNumber);

        if (resultado.success) {
            const binData = resultado.data;
            const source = resultado.source;
            
            let mensaje = `‚úÖ *INFORMACI√ìN COMPLETA DE LA TARJETA*\n\n`;
            mensaje += `üî¢ *BIN:* ${binNumber}\n`;
            mensaje += `üè¶ *Banco:* ${binData.bank?.name || binData.bank || 'No disponible'}\n`;
            mensaje += `üìç *Pa√≠s:* ${binData.country?.name || binData.country || 'No disponible'} ${binData.country?.emoji || ''}\n`;
            
            // CATEGOR√çA Y TIPO (lo m√°s importante)
            mensaje += `üí≥ *Tipo:* ${binData.type || 'No disponible'}\n`;
            mensaje += `üìä *Categor√≠a:* ${binData.category || binData.scheme || 'No disponible'}\n`;
            
            // INFORMACI√ìN ADICIONAL DE Binlist.com.br
            if (binData.level) {
                mensaje += `‚≠ê *Nivel:* ${binData.level}\n`;
            }
            
            if (binData.brand) {
                mensaje += `üî§ *Marca:* ${binData.brand}\n`;
            }
            
            if (binData.currency) {
                mensaje += `üí∞ *Moneda:* ${binData.currency}\n`;
            }
            
            if (binData.bank?.url) {
                mensaje += `üåê *Sitio web:* ${binData.bank.url}\n`;
            }
            
            if (binData.bank?.phone) {
                mensaje += `üìû *Tel√©fono:* ${binData.bank.phone}\n`;
            }
            
            mensaje += `\n‚è∞ *Consulta realizada:* ${new Date().toLocaleString()}\n`;
            mensaje += `üéØ *Fuente:* ${source}\n`;
            mensaje += `üìà *L√≠mite:* Consultas ilimitadas`;

            await bot.editMessageText(mensaje, {
                chat_id: chatId,
                message_id: progressMsg.message_id
            });

        } else {
            await bot.editMessageText(
                `‚ùå *ERROR EN LA CONSULTA*\n\n${resultado.error}\n\nüí° *Ejemplos v√°lidos:*\n‚Ä¢ /bin 424242 (Visa)\n‚Ä¢ /bin 555555 (Mastercard)\n‚Ä¢ /bin 378282 (Amex)\n‚Ä¢ /bin 601111 (Discover)`,
                {
                    chat_id: chatId,
                    message_id: progressMsg.message_id
                }
            );
        }

    } catch (error) {
        await bot.editMessageText(
            `‚ùå *ERROR DE CONEXI√ìN*\n\n${error.message}\n\nüîß *Intenta con:*\n/bin 424242\n/bin 555555\n/bin 378282`,
            {
                chat_id: chatId,
                message_id: progressMsg.message_id
            }
        );
    }
});

// Comando /help mejorado
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    
    const message = `‚ùì *AYUDA - BIN CHECKER PRO* üöÄ

*¬øQu√© informaci√≥n muestra?*
‚úÖ Categor√≠a de la tarjeta
‚úÖ Tipo (Cr√©dito/D√©bito)  
‚úÖ Nivel (Classic/Gold/Platinum)
‚úÖ Pa√≠s y banco emisor
‚úÖ Marca (Visa/Mastercard/Amex)
‚úÖ Datos de contacto del banco

*Ejemplos para probar:*
‚Ä¢ /bin 424242 (Visa Classic)
‚Ä¢ /bin 555555 (Mastercard Standard)  
‚Ä¢ /bin 378282 (Amex Gold)
‚Ä¢ /bin 491748 (Visa Platinum)
‚Ä¢ /bin 601111 (Discover)

*üîí Totalmente GRATIS:*
‚Ä¢ Sin API Key requerida
‚Ä¢ Sin registro necesario  
‚Ä¢ Sin l√≠mites estrictos

*üéØ Fuentes utilizadas:*
‚Ä¢ Binlist.com.br (1000/d√≠a)
‚Ä¢ Binlist.net (fallback)`;
    
    bot.sendMessage(chatId, message);
});

// Comando /status
bot.onText(/\/status/, (msg) => {
    const chatId = msg.chat.id;
    
    const statusMessage = `üìä *ESTADO DEL BOT - BIN CHECKER PRO* üöÄ

‚úÖ *Bot:* Funcionando al 100%
‚è∞ *Hora:* ${new Date().toLocaleString()}
üéØ *API:* Binlist.com.br + Binlist.net
üìà *L√≠mite:* 1000+ consultas/d√≠a
üí° *Ejemplo:* /bin 424242

*‚ú® Caracter√≠sticas:*
‚Ä¢ ‚úÖ Categor√≠a de tarjeta
‚Ä¢ ‚úÖ Tipo y nivel  
‚Ä¢ ‚úÖ Pa√≠s y banco
‚Ä¢ ‚úÖ M√∫ltiples fuentes
‚Ä¢ ‚úÖ Respuesta r√°pida`;
    
    bot.sendMessage(chatId, statusMessage);
});

// Comando /ejemplos
bot.onText(/\/ejemplos/, (msg) => {
    const chatId = msg.chat.id;
    
    const ejemplos = `üéØ *BINs DE PRUEBA CON CATEGOR√çA* üìä

*üí≥ Visa:*
‚Ä¢ /bin 424242 - Classic (EEUU)
‚Ä¢ /bin 491748 - Platinum (M√©xico)  
‚Ä¢ /bin 453998 - Gold (Espa√±a)

*üí≥ Mastercard:*
‚Ä¢ /bin 555555 - Standard (EEUU)
‚Ä¢ /bin 522222 - World Elite (Canad√°)
‚Ä¢ /bin 545454 - Gold (Reino Unido)

*üí≥ American Express:*
‚Ä¢ /bin 378282 - Gold (EEUU)
‚Ä¢ /bin 371449 - Platinum (Canad√°)

*üí≥ Otras:*
‚Ä¢ /bin 601111 - Discover (EEUU)
‚Ä¢ /bin 353011 - JCB (Jap√≥n)
‚Ä¢ /bin 362272 - Diners Club (M√©xico)`;
    
    bot.sendMessage(chatId, ejemplos);
});

// Manejar mensajes no reconocidos
bot.on('message', (msg) => {
    if (!msg.text.startsWith('/')) {
        bot.sendMessage(msg.chat.id, 
            'ü§ñ Usa /help para ver comandos. Ejemplo: /bin 424242'
        );
    }
});

// Manejo de errores
bot.on('polling_error', (error) => {
    console.log('Error de polling:', error.code);
});

console.log('‚úÖ Bot GOKUSYS iniciado correctamente');